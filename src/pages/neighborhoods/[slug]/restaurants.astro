---
import BaseLayout from '@/layouts/BaseLayout.astro';
import RestaurantCard from '@/components/RestaurantCard.astro';
import { restaurants } from '@/data/restaurants';

export async function getStaticPaths() {
  // Get unique neighborhoods
  const neighborhoods = [...new Set(restaurants.map(r => r.neighborhood))];
  
  return neighborhoods.map(neighborhood => ({
    params: { slug: neighborhood.toLowerCase().replace(/\s+/g, '-') },
    props: { neighborhood }
  }));
}

const { neighborhood } = Astro.props;

// Filter restaurants by neighborhood
const neighborhoodRestaurants = restaurants
  .filter(r => r.neighborhood === neighborhood)
  .sort((a, b) => b.dateNightScore - a.dateNightScore);

// Get other neighborhoods for cross-linking
const otherNeighborhoods = [...new Set(restaurants.map(r => r.neighborhood))]
  .filter(n => n !== neighborhood)
  .sort();

// Set canonical URL
const canonicalUrl = `https://datenightrestaurants.com/neighborhoods/${neighborhood.toLowerCase().replace(/\s+/g, '-')}/restaurants/`;

const structuredData = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": `Date Night Restaurants in ${neighborhood}`,
  "description": `Discover romantic date night restaurants in ${neighborhood}, Los Angeles. Find the perfect dining spot for your special evening.`,
  "url": canonicalUrl,
  "mainEntity": {
    "@type": "ItemList",
    "itemListElement": neighborhoodRestaurants.map((restaurant, index) => ({
      "@type": "Restaurant",
      "position": index + 1,
      "name": restaurant.name,
      "address": restaurant.address,
      "aggregateRating": {
        "@type": "AggregateRating",
        "ratingValue": restaurant.rating,
        "reviewCount": restaurant.reviewCount || 50
      }
    }))
  }
};
---

<BaseLayout
  title={`${neighborhood} Date Night Restaurants | Los Angeles`}
  description={`Discover romantic date night restaurants in ${neighborhood}, Los Angeles. Find the perfect dining spot for your special evening with our curated selection of ${neighborhoodRestaurants.length} restaurants.`}
  canonical={canonicalUrl}
  keywords={[`${neighborhood} restaurants`, 'date night restaurants', 'romantic dining', 'Los Angeles restaurants', `${neighborhood} date night`]}
  structuredData={structuredData}
>
  <section class="neighborhood-hero">
    <div class="container">
      <div class="breadcrumb">
        <a href="/neighborhoods/">Neighborhoods</a>
        <span>â€º</span>
        <span>{neighborhood}</span>
      </div>
      
      <h1>Date Night Restaurants in {neighborhood}</h1>
      <p class="hero-subtitle">Discover {neighborhoodRestaurants.length} romantic dining spots in {neighborhood}</p>
      
      <div class="neighborhood-stats">
        <div class="stat">
          <span class="stat-number">{neighborhoodRestaurants.length}</span>
          <span class="stat-label">Restaurants</span>
        </div>
        <div class="stat">
          <span class="stat-number">{Math.round(neighborhoodRestaurants.reduce((sum, r) => sum + r.dateNightScore, 0) / neighborhoodRestaurants.length)}</span>
          <span class="stat-label">Avg Date Score</span>
        </div>
        <div class="stat">
          <span class="stat-number">{Math.round(neighborhoodRestaurants.reduce((sum, r) => sum + r.rating, 0) / neighborhoodRestaurants.length * 10) / 10}</span>
          <span class="stat-label">Avg Rating</span>
        </div>
      </div>
    </div>
  </section>

  <section class="restaurants-section">
    <div class="container">
      <div class="section-header">
        <h2>Restaurants in {neighborhood}</h2>
        <p>Curated selection of romantic date night spots</p>
      </div>
      
      <div class="restaurants-grid">
        {neighborhoodRestaurants.map(restaurant => (
          <RestaurantCard restaurant={restaurant} />
        ))}
      </div>
      
      {neighborhoodRestaurants.length === 0 && (
        <div class="no-restaurants">
          <h3>No restaurants found in {neighborhood}</h3>
          <p>We're always adding new restaurants. Check back soon!</p>
          <a href="/neighborhoods/" class="btn btn-primary">Explore Other Neighborhoods</a>
        </div>
      )}
    </div>
  </section>

  <section class="other-neighborhoods">
    <div class="container">
      <h2>Explore Other Neighborhoods</h2>
      <p>Discover romantic dining in other areas of Los Angeles</p>
      <div class="neighborhoods-grid">
        {otherNeighborhoods.slice(0, 6).map(otherNeighborhood => {
          const count = restaurants.filter(r => r.neighborhood === otherNeighborhood).length;
          return (
            <div class="neighborhood-card">
              <a href={`/neighborhoods/${otherNeighborhood.toLowerCase().replace(/\s+/g, '-')}/restaurants/`}>
                <h3>{otherNeighborhood}</h3>
                <p>{count} restaurants</p>
              </a>
            </div>
          );
        })}
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  .neighborhood-hero {
    background: linear-gradient(135deg, #2C2C2C 0%, #4A4A4A 50%, #D4AF37 100%);
    color: white;
    padding: 120px 0 80px;
    text-align: center;
  }

  .breadcrumb {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 2rem;
    font-size: 0.9rem;
    opacity: 0.8;
  }

  .breadcrumb a {
    color: #D4AF37;
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .breadcrumb a:hover {
    color: white;
  }

  .neighborhood-hero h1 {
    font-size: 3rem;
    margin-bottom: 1rem;
    font-family: 'Playfair Display', serif;
  }

  .hero-subtitle {
    font-size: 1.2rem;
    margin-bottom: 3rem;
    opacity: 0.9;
  }

  .neighborhood-stats {
    display: flex;
    justify-content: center;
    gap: 3rem;
    margin-top: 2rem;
  }

  .stat {
    text-align: center;
  }

  .stat-number {
    display: block;
    font-size: 2.5rem;
    font-weight: 700;
    color: #D4AF37;
  }

  .stat-label {
    font-size: 1rem;
    opacity: 0.8;
  }

  .restaurants-section {
    padding: 4rem 0;
  }

  .section-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .section-header h2 {
    font-size: 2.5rem;
    color: #2C2C2C;
    margin-bottom: 1rem;
    font-family: 'Playfair Display', serif;
  }

  .section-header p {
    font-size: 1.1rem;
    color: #666;
  }

  .restaurants-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
    margin-bottom: 3rem;
  }

  .no-restaurants {
    text-align: center;
    padding: 4rem 2rem;
    color: #666;
  }

  .no-restaurants h3 {
    font-size: 1.5rem;
    color: #2C2C2C;
    margin-bottom: 1rem;
  }

  .other-neighborhoods {
    padding: 4rem 0;
    background: #F8F6F0;
    text-align: center;
  }

  .other-neighborhoods h2 {
    font-size: 2.5rem;
    color: #2C2C2C;
    margin-bottom: 1rem;
    font-family: 'Playfair Display', serif;
  }

  .other-neighborhoods p {
    font-size: 1.1rem;
    color: #666;
    margin-bottom: 2rem;
  }

  .neighborhoods-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    max-width: 1200px;
    margin: 0 auto;
  }

  .neighborhood-card {
    background: white;
    border-radius: 15px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    text-align: left;
    padding: 1.5rem;
  }

  .neighborhood-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 30px rgba(0,0,0,0.15);
  }

  .neighborhood-card a {
    text-decoration: none;
    color: inherit;
  }

  .neighborhood-card h3 {
    font-size: 1.4rem;
    color: #333;
    margin-bottom: 0.5rem;
    font-family: 'Playfair Display', serif;
  }

  .neighborhood-card p {
    font-size: 0.95rem;
    color: #666;
    margin-bottom: 0;
  }

  .btn {
    display: inline-block;
    padding: 0.8rem 2rem;
    border-radius: 25px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
  }

  .btn-primary {
    background: linear-gradient(45deg, #D4AF37, #E6C547);
    color: #2C2C2C;
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(212, 175, 55, 0.4);
  }

  @media (max-width: 768px) {
    .neighborhood-hero h1 {
      font-size: 2.5rem;
    }

    .neighborhood-hero p {
      font-size: 1rem;
    }

    .neighborhood-stats {
      flex-direction: column;
      gap: 1.5rem;
    }

    .restaurants-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }

    .section-header h2 {
      font-size: 2rem;
    }

    .other-neighborhoods h2 {
      font-size: 2rem;
    }
  }
</style>