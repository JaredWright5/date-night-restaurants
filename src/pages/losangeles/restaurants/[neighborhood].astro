---
import BaseLayout from '@/layouts/BaseLayout.astro';
import RestaurantCard from '@/components/RestaurantCard.astro';
import { getRestaurantsByNeighborhood, getAllNeighborhoods } from '@/lib/supabase';

export async function getStaticPaths() {
  const neighborhoods = await getAllNeighborhoods();
  
  return neighborhoods.map(neighborhood => ({
    params: { neighborhood: neighborhood.slug },
    props: { neighborhoodName: neighborhood.name, neighborhoodSlug: neighborhood.slug }
  }));
}

const { neighborhoodName, neighborhoodSlug } = Astro.props;

// Get restaurants data from Supabase filtered by neighborhood
let restaurants;
try {
  restaurants = await getRestaurantsByNeighborhood(neighborhoodSlug);
} catch (error) {
  console.error('Error fetching restaurants:', error);
  return new Response('Database connection failed. Please check your Supabase configuration.', { status: 500 });
}

// Get unique values for filters
const neighborhoods = Array.from(new Set(restaurants.map(r => r.neighborhood))).sort();
const cuisines = Array.from(new Set(restaurants.flatMap(r => r.cuisine_types))).sort();

// Generate page title and description
const pageTitle = `Date Night Restaurants in ${neighborhoodName} | ${restaurants.length} Romantic Dining Spots`;
const pageDescription = `Discover the best date night restaurants in ${neighborhoodName}, Los Angeles. ${restaurants.length} romantic dining spots perfect for couples, from cozy neighborhood spots to upscale fine dining.`;

// Structured data
const structuredData = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  "numberOfItems": restaurants.length,
  "itemListElement": restaurants.map((restaurant, index) => ({
    "@type": "ListItem",
    "position": index + 1,
    "item": {
      "@type": "Restaurant",
      "name": restaurant.name,
      "url": `https://datenightrestaurants.com/restaurants/${restaurant.neighborhood_slug}/${restaurant.slug}/`,
      "address": {
        "@type": "PostalAddress",
        "streetAddress": restaurant.address,
        "addressLocality": restaurant.neighborhood,
        "addressRegion": "CA",
        "addressCountry": "US"
      },
      "aggregateRating": {
        "@type": "AggregateRating",
        "ratingValue": restaurant.rating,
        "reviewCount": 0
      }
    }
  }))
};
---

<BaseLayout
  title={pageTitle}
  description={pageDescription}
  keywords={[`date night restaurants ${neighborhoodName}`, `romantic dining ${neighborhoodName}`, `couples restaurants ${neighborhoodName}`]}
  canonical={`https://datenightrestaurants.com/losangeles/restaurants/${neighborhoodSlug}/`}
  structuredData={structuredData}
>
  <main class="restaurants-page">
    <div class="hero-section">
      <div class="container">
        <h1>Date Night Restaurants in {neighborhoodName}</h1>
        <p class="hero-subtitle">
          Discover romantic dining spots in {neighborhoodName}
        </p>
        
        <div class="hero-stats">
          <div class="stat">
            <span class="stat-number">{restaurants.length}</span>
            <span class="stat-label">Restaurants</span>
          </div>
          <div class="stat">
            <span class="stat-number">{Math.round(restaurants.reduce((sum, r) => sum + r.date_night_score, 0) / restaurants.length)}</span>
            <span class="stat-label">Avg Date Score</span>
          </div>
          <div class="stat">
            <span class="stat-number">{restaurants.filter(r => r.price_level >= 3).length}</span>
            <span class="stat-label">Upscale Options</span>
          </div>
        </div>
      </div>
    </div>

    <div class="filters-section">
      <div class="container">
        <h2>Filter Restaurants</h2>
        <div class="filters-grid">
          <div class="filter-group">
            <label for="neighborhood-filter">Neighborhood</label>
            <select id="neighborhood-filter" class="filter-select">
              <option value="">All Neighborhoods</option>
              {neighborhoods.map(neighborhood => (
                <option value={neighborhood.toLowerCase().replace(/\s+/g, '-')} selected={neighborhood === neighborhoodName}>
                  {neighborhood}
                </option>
              ))}
            </select>
          </div>
          
          <div class="filter-group">
            <label for="cuisine-filter">Cuisine</label>
            <select id="cuisine-filter" class="filter-select">
              <option value="">All Cuisines</option>
              {cuisines.map(cuisine => (
                <option value={cuisine}>{cuisine}</option>
              ))}
            </select>
          </div>
          
          <div class="filter-group">
            <label for="price-filter">Price Level</label>
            <select id="price-filter" class="filter-select">
              <option value="">All Price Levels</option>
              <option value="1">$ (Budget)</option>
              <option value="2">$$ (Moderate)</option>
              <option value="3">$$$ (Expensive)</option>
              <option value="4">$$$$ (Very Expensive)</option>
            </select>
          </div>
          
          <div class="filter-group">
            <label for="date-score-filter">Date Score</label>
            <select id="date-score-filter" class="filter-select">
              <option value="">All Date Scores</option>
              <option value="95">95+ Date Score</option>
              <option value="90">90+ Date Score</option>
              <option value="85">85+ Date Score</option>
              <option value="80">80+ Date Score</option>
            </select>
          </div>
        </div>
      </div>
    </div>

    <div class="restaurants-section">
      <div class="container">
        <div class="results-header">
          <h2>Showing {restaurants.length} Restaurants in {neighborhoodName}</h2>
          <div class="sort-options">
            <label for="sort-select">Sort by:</label>
            <select id="sort-select" class="sort-select">
              <option value="date-score">Date Score (High to Low)</option>
              <option value="name">Name (A to Z)</option>
              <option value="price">Price (Low to High)</option>
            </select>
          </div>
        </div>
        
        {restaurants.length > 0 ? (
          <div class="restaurants-grid">
            {restaurants.map(restaurant => (
              <RestaurantCard restaurant={restaurant} />
            ))}
          </div>
        ) : (
          <div class="no-results">
            <h3>No Restaurants Found</h3>
            <p>Try adjusting your filters or search terms.</p>
          </div>
        )}
      </div>
    </div>

    <div class="neighborhoods-section">
      <div class="container">
        <h2>Explore Other Neighborhoods</h2>
        <p>Discover romantic dining experiences in other areas of Los Angeles.</p>
        <div class="neighborhoods-grid">
          {neighborhoods.filter(n => n !== neighborhoodName).map(neighborhood => {
            const neighborhoodRestaurants = restaurants.filter(r => r.neighborhood === neighborhood);
            return (
              <div class="neighborhood-card">
                <h3>{neighborhood}</h3>
                <p>{neighborhoodRestaurants.length} restaurant{neighborhoodRestaurants.length !== 1 ? 's' : ''}</p>
                <a href={`/losangeles/restaurants/${neighborhood.toLowerCase().replace(/\s+/g, '-')}/`} class="btn btn-outline">
                  View Restaurants
                </a>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  </main>
</BaseLayout>

<style>
  .restaurants-page {
    padding-top: 80px;
  }
  
  .hero-section {
    background: linear-gradient(135deg, #2C2C2C 0%, #1a1a1a 100%);
    color: white;
    padding: 4rem 0;
    text-align: center;
  }
  
  .hero-section h1 {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: #D4AF37;
    font-family: 'Playfair Display', serif;
  }
  
  .hero-subtitle {
    font-size: 1.2rem;
    margin-bottom: 3rem;
    color: #e0e0e0;
  }
  
  .hero-stats {
    display: flex;
    justify-content: center;
    gap: 3rem;
    margin-top: 2rem;
  }
  
  .stat {
    text-align: center;
  }
  
  .stat-number {
    display: block;
    font-size: 2.5rem;
    font-weight: 700;
    color: #D4AF37;
  }
  
  .stat-label {
    font-size: 1rem;
    color: #e0e0e0;
  }
  
  .filters-section {
    padding: 3rem 0;
    background: #FFF8F0;
  }
  
  .filters-section h2 {
    text-align: center;
    font-size: 2rem;
    margin-bottom: 2rem;
    color: #2C2C2C;
  }
  
  .filters-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .filter-group {
    display: flex;
    flex-direction: column;
  }
  
  .filter-group label {
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: #2C2C2C;
  }
  
  .filter-select {
    padding: 0.75rem;
    border: 2px solid #E8B86D;
    border-radius: 8px;
    background: white;
    font-size: 1rem;
  }
  
  .restaurants-section {
    padding: 4rem 0;
    background: white;
  }
  
  .results-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 3rem;
  }
  
  .results-header h2 {
    font-size: 2rem;
    color: #2C2C2C;
    margin: 0;
  }
  
  .sort-options {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .sort-select {
    padding: 0.5rem;
    border: 2px solid #E8B86D;
    border-radius: 8px;
    background: white;
  }
  
  .restaurants-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
  }
  
  .no-results {
    text-align: center;
    padding: 4rem 0;
  }
  
  .no-results h3 {
    font-size: 2rem;
    color: #2C2C2C;
    margin-bottom: 1rem;
  }
  
  .neighborhoods-section {
    padding: 4rem 0;
    background: #F8F6F0;
  }
  
  .neighborhoods-section h2 {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 1rem;
    color: #2C2C2C;
  }
  
  .neighborhoods-section p {
    text-align: center;
    font-size: 1.1rem;
    color: #666;
    margin-bottom: 3rem;
  }
  
  .neighborhoods-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
  }
  
  .neighborhood-card {
    background: white;
    padding: 2rem;
    border-radius: 15px;
    text-align: center;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    transition: transform 0.3s ease;
  }
  
  .neighborhood-card:hover {
    transform: translateY(-5px);
  }
  
  .neighborhood-card h3 {
    font-size: 1.5rem;
    color: #2C2C2C;
    margin-bottom: 0.5rem;
  }
  
  .neighborhood-card p {
    color: #666;
    margin-bottom: 1.5rem;
  }
  
  .btn {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
  }
  
  .btn-outline {
    background: transparent;
    color: #D4AF37;
    border: 2px solid #D4AF37;
  }
  
  .btn-outline:hover {
    background: #D4AF37;
    color: white;
  }
  
  @media (max-width: 768px) {
    .hero-stats {
      flex-direction: column;
      gap: 1.5rem;
    }
    
    .filters-grid {
      grid-template-columns: 1fr;
    }
    
    .results-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }
    
    .restaurants-grid {
      grid-template-columns: 1fr;
    }
  }
</style>
