---
import BaseLayout from '@/layouts/BaseLayout.astro';
import RestaurantCard from '@/components/RestaurantCard.astro';
import { restaurants, searchRestaurants } from '@/data/restaurants';
import { getAllCities } from '@/data/cities';

// Get URL parameters
const url = new URL(Astro.request.url);
const searchQuery = url.searchParams.get('search') || '';
const neighborhoodFilter = url.searchParams.get('neighborhood') || '';
const cuisineFilter = url.searchParams.get('cuisine') || '';
const priceFilter = url.searchParams.get('price') || '';
const ratingFilter = url.searchParams.get('rating') || '';

// Apply search and filters
let filteredRestaurants = restaurants;

if (searchQuery) {
  filteredRestaurants = searchRestaurants(searchQuery, {
    neighborhood: neighborhoodFilter,
    cuisine: cuisineFilter,
    price: priceFilter,
    rating: ratingFilter
  });
} else if (neighborhoodFilter || cuisineFilter || priceFilter || ratingFilter) {
  filteredRestaurants = searchRestaurants('', {
    neighborhood: neighborhoodFilter,
    cuisine: cuisineFilter,
    price: priceFilter,
    rating: ratingFilter
  });
}

const allRestaurants = filteredRestaurants
  .sort((a, b) => b.dateNightScore - a.dateNightScore);

// Get unique neighborhoods for filtering
const neighborhoods = Array.from(new Set(restaurants.map(r => r.neighborhood))).sort();

// Get unique cuisines for filtering
const allCuisines = restaurants.flatMap(r => r.cuisineTypes);
const uniqueCuisines = Array.from(new Set(allCuisines)).sort();

// Generate dynamic title and description based on filters
const getPageTitle = () => {
  if (searchQuery) {
    return `Search Results for "${searchQuery}" | Date Night Restaurants in Los Angeles`;
  }
  if (neighborhoodFilter || cuisineFilter || priceFilter || ratingFilter) {
    const filters = [];
    if (neighborhoodFilter) filters.push(neighborhoodFilter);
    if (cuisineFilter) filters.push(cuisineFilter.replace(/_/g, ' '));
    if (priceFilter) filters.push(`${'$'.repeat(parseInt(priceFilter))} restaurants`);
    if (ratingFilter) filters.push(`${ratingFilter}+ star restaurants`);
    return `Filtered Date Night Restaurants: ${filters.join(', ')} | Los Angeles`;
  }
  return "All Date Night Restaurants in Los Angeles | Filter by Neighborhood, Cuisine, Price";
};

const getPageDescription = () => {
  if (searchQuery) {
    return `Search results for "${searchQuery}" in Los Angeles date night restaurants. Find the perfect romantic dining spot.`;
  }
  if (neighborhoodFilter || cuisineFilter || priceFilter || ratingFilter) {
    return `Filtered date night restaurants in Los Angeles based on your criteria. Discover romantic dining spots that match your preferences.`;
  }
  return "Explore our complete directory of romantic date night restaurants in Los Angeles. Use our advanced filters to find the perfect spot by neighborhood, cuisine, or price.";
};

const structuredData = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": searchQuery ? `Search Results for "${searchQuery}"` : "All Date Night Restaurants in Los Angeles",
  "description": getPageDescription(),
  "url": "https://datenightrestaurants.com/losangeles/restaurants/",
};
---

<BaseLayout
  title={getPageTitle()}
  description={getPageDescription()}
  keywords={['all date night restaurants LA', 'restaurants in Los Angeles', 'filter restaurants LA', 'romantic dining directory', 'LA restaurant guide']}
  structuredData={structuredData}
>
  <section class="restaurants-listing-hero">
    <div class="container">
      {searchQuery ? (
        <div class="search-results-header">
          <h1>Search Results for "{searchQuery}"</h1>
          <p>Found {allRestaurants.length} restaurant{allRestaurants.length !== 1 ? 's' : ''} matching your search.</p>
        </div>
      ) : neighborhoodFilter || cuisineFilter || priceFilter || ratingFilter ? (
        <div class="filter-results-header">
          <h1>Filtered Date Night Restaurants</h1>
          <p>Showing {allRestaurants.length} restaurant{allRestaurants.length !== 1 ? 's' : ''} matching your filters.</p>
          <div class="active-filters">
            {neighborhoodFilter && <span class="filter-tag">Neighborhood: {neighborhoodFilter}</span>}
            {cuisineFilter && <span class="filter-tag">Cuisine: {cuisineFilter.replace(/_/g, ' ')}</span>}
            {priceFilter && <span class="filter-tag">Price: {'$'.repeat(parseInt(priceFilter))}</span>}
            {ratingFilter && <span class="filter-tag">Rating: {ratingFilter}+ stars</span>}
          </div>
        </div>
      ) : (
        <div>
          <h1>All Date Night Restaurants in Los Angeles</h1>
          <p>Find your perfect romantic dining experience with our comprehensive list and advanced filters.</p>
        </div>
      )}

      <div class="search-filters-container">
        <div class="search-box">
          <input type="text" id="searchInput" placeholder="Search restaurants, cuisine, or location..." />
          <button id="searchBtn"><i class="fas fa-search"></i></button>
        </div>

        <div class="filter-group">
          <select id="cuisineFilter">
            <option value="">All Cuisines</option>
            {(() => {
              const capitalizeWords = (s) => s.replace(/_/g, ' ').replace(/\b\w/g, (ch) => ch.toUpperCase());
              return uniqueCuisines.map(cuisine => (
                <option value={cuisine}>{capitalizeWords(cuisine)}</option>
              ));
            })()}
          </select>

          <select id="priceFilter">
            <option value="">All Price Levels</option>
            <option value="1">$ (Budget)</option>
            <option value="2">$$ (Moderate)</option>
            <option value="3">$$$ (Expensive)</option>
            <option value="4">$$$$ (Very Expensive)</option>
          </select>
          
          <select id="neighborhoodFilter">
            <option value="">All Neighborhoods</option>
            {neighborhoods.map(neighborhood => (
              <option value={neighborhood}>{neighborhood}</option>
            ))}
          </select>
        </div>
      </div>
    </div>
  </section>

  <section class="restaurants-list">
    <div class="container">
      <h2 id="resultsTitle">Showing <span id="resultsCount">{allRestaurants.length}</span> Restaurants</h2>
      <div class="restaurants-grid" id="restaurantsGrid">
        {allRestaurants.map(restaurant => (
          <RestaurantCard restaurant={restaurant} />
        ))}
      </div>
      <div id="noResults" class="no-results" style="display: none;">
        <h3>No Restaurants Found</h3>
        <p>Try adjusting your filters or search terms.</p>
      </div>
    </div>
  </section>

  <!-- Neighborhoods Section -->
  <section class="neighborhoods-explore">
    <div class="container">
      <h2>Explore by Neighborhood</h2>
      <p>Discover romantic dining experiences in specific areas of Los Angeles.</p>
      <div class="neighborhoods-grid">
        {neighborhoods.map(neighborhood => (
          <div class="neighborhood-card">
            <a href={`/losangeles/neighborhoods/${neighborhood.toLowerCase().replace(/\s+/g, '-')}/`}>
              <h3>{neighborhood}</h3>
              <p>{(() => {
                const count = restaurants.filter(r => r.neighborhood === neighborhood).length;
                return `${count} restaurants`;
              })()}</p>
            </a>
          </div>
        ))}
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  .restaurants-listing-hero {
    background: linear-gradient(135deg, #2C2C2C 0%, #4A4A4A 50%, #D4AF37 100%);
    color: white;
    padding: 120px 0 80px;
    text-align: center;
  }

  .restaurants-listing-hero h1 {
    font-size: 3rem;
    margin-bottom: 1rem;
    font-family: 'Playfair Display', serif;
  }

  .restaurants-listing-hero p {
    font-size: 1.2rem;
    margin-bottom: 3rem;
    opacity: 0.9;
  }

  .search-filters-container {
    max-width: 800px;
    margin: 0 auto;
  }

  .search-box {
    display: flex;
    margin-bottom: 2rem;
  }

  .search-box input {
    flex: 1;
    padding: 1rem 1.5rem;
    border: none;
    border-radius: 50px 0 0 50px;
    font-size: 1rem;
    outline: none;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
  }

  .search-box button {
    background: #D4AF37;
    color: white;
    border: none;
    padding: 1rem 1.5rem;
    border-radius: 0 50px 50px 0;
    cursor: pointer;
    font-size: 1rem;
    transition: background 0.3s ease;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
  }

  .search-box button:hover {
    background: #B8941F;
  }

  .filter-group {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    justify-content: center;
  }

  .filter-group select {
    padding: 0.75rem 1rem;
    border: none;
    border-radius: 8px;
    font-size: 0.9rem;
    background: white;
    color: #333;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    min-width: 150px;
  }

  .restaurants-list {
    padding: 4rem 0;
  }

  .restaurants-list h2 {
    font-size: 2rem;
    color: #2C2C2C;
    margin-bottom: 2rem;
    text-align: center;
    font-family: 'Playfair Display', serif;
  }

  .restaurants-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-bottom: 3rem;
  }

  .no-results {
    text-align: center;
    padding: 3rem;
    color: #666;
  }

  .no-results h3 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: #2C2C2C;
  }

  .neighborhoods-explore {
    padding: 4rem 0;
    background: #F8F6F0;
    text-align: center;
  }

  .neighborhoods-explore h2 {
    font-size: 2.5rem;
    color: #2C2C2C;
    margin-bottom: 1rem;
    font-family: 'Playfair Display', serif;
  }

  .neighborhoods-explore p {
    font-size: 1.1rem;
    color: #666;
    margin-bottom: 2rem;
  }

  .neighborhoods-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    max-width: 1200px;
    margin: 0 auto;
  }

  .neighborhood-card {
    background: white;
    border-radius: 15px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    text-align: left;
    padding: 1.5rem;
  }

  .neighborhood-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 30px rgba(0,0,0,0.15);
  }

  .neighborhood-card a {
    text-decoration: none;
    color: inherit;
  }

  .neighborhood-card h3 {
    font-size: 1.4rem;
    color: #333;
    margin-bottom: 0.5rem;
    font-family: 'Playfair Display', serif;
  }

  .neighborhood-card p {
    font-size: 0.95rem;
    color: #666;
    margin-bottom: 0;
  }

  @media (max-width: 768px) {
    .restaurants-listing-hero h1 {
      font-size: 2.5rem;
    }

    .restaurants-listing-hero p {
      font-size: 1rem;
    }

    .filter-group {
      flex-direction: column;
      align-items: center;
    }

    .filter-group select {
      width: 100%;
      max-width: 300px;
    }

    .search-box input {
      border-radius: 50px 0 0 50px;
    }

    .search-box button {
      border-radius: 0 50px 50px 0;
    }

    .restaurants-list, .neighborhoods-explore {
      padding: 3rem 0;
    }

    .restaurants-list h2, .neighborhoods-explore h2 {
      font-size: 1.8rem;
    }
  }
  
  /* Search and Filter Results Styling */
  .search-results-header,
  .filter-results-header {
    text-align: center;
    margin-bottom: 2rem;
  }
  
  .active-filters {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: center;
    margin-top: 1rem;
  }
  
  .filter-tag {
    background: #D4AF37;
    color: #2C2C2C;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 500;
  }
</style>

<script>
  // Client-side filtering and search
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const neighborhoodFilter = document.getElementById('neighborhoodFilter');
    const cuisineFilter = document.getElementById('cuisineFilter');
    const priceFilter = document.getElementById('priceFilter');
    const restaurantsGrid = document.getElementById('restaurantsGrid');
    const noResults = document.getElementById('noResults');
    const resultsTitle = document.getElementById('resultsTitle');
    const resultsCount = document.getElementById('resultsCount');
    
    const allRestaurants = Array.from(restaurantsGrid.children);
    
    function getRestaurantData(restaurantCard) {
      const name = restaurantCard.querySelector('h3')?.textContent || '';
      const address = restaurantCard.querySelector('.restaurant-address')?.textContent || '';
      const cuisine = restaurantCard.querySelector('.restaurant-cuisine')?.textContent || '';
      const neighborhood = restaurantCard.dataset.neighborhood || '';
      const price = restaurantCard.dataset.price || '';
      const rating = restaurantCard.dataset.rating || '';
      
      return { name, address, cuisine, neighborhood, price, rating };
    }
    
    function filterRestaurants() {
      const searchTerm = searchInput.value.toLowerCase();
      const selectedNeighborhood = neighborhoodFilter.value;
      const selectedCuisine = cuisineFilter.value;
      const selectedPrice = priceFilter.value;
      
      let visibleCount = 0;
      
      allRestaurants.forEach(restaurantCard => {
        const restaurant = getRestaurantData(restaurantCard);
        let show = true;
        
        // Search filter
        if (searchTerm && 
            !restaurant.name.toLowerCase().includes(searchTerm) && 
            !restaurant.address.toLowerCase().includes(searchTerm) &&
            !restaurant.cuisine.toLowerCase().includes(searchTerm)) {
          show = false;
        }
        
        // Neighborhood filter
        if (selectedNeighborhood && restaurant.neighborhood !== selectedNeighborhood) {
          show = false;
        }
        
        // Cuisine filter
        if (selectedCuisine && !restaurant.cuisine.toLowerCase().includes(selectedCuisine.toLowerCase())) {
          show = false;
        }
        
        // Price filter
        if (selectedPrice && restaurant.price !== selectedPrice) {
          show = false;
        }
        
        if (show) {
          restaurantCard.style.display = 'block';
          visibleCount++;
        } else {
          restaurantCard.style.display = 'none';
        }
      });
      
      if (visibleCount === 0) {
        restaurantsGrid.style.display = 'none';
        noResults.style.display = 'block';
      } else {
        restaurantsGrid.style.display = 'grid';
        noResults.style.display = 'none';
      }
      
      resultsCount.textContent = `${visibleCount} restaurants found`;
    }
    
    searchInput.addEventListener('input', filterRestaurants);
    neighborhoodFilter.addEventListener('change', filterRestaurants);
    cuisineFilter.addEventListener('change', filterRestaurants);
    priceFilter.addEventListener('change', filterRestaurants);
    
    filterRestaurants();
  });
</script>
