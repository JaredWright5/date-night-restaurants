---
import BaseLayout from '@/layouts/BaseLayout.astro';
import { AdminDatabase } from '@/lib/admin-database';

export async function getStaticPaths() {
  try {
    const restaurants = await AdminDatabase.getRestaurants();
    return restaurants.map(restaurant => ({
      params: { slug: restaurant.slug },
      props: { restaurant }
    }));
  } catch (error) {
    console.error('Error fetching restaurants for static paths:', error);
    return [];
  }
}

const { restaurant } = Astro.props;
---

<BaseLayout
  title={`Edit ${restaurant.name} | Admin Dashboard`}
  description={`Edit restaurant details for ${restaurant.name}`}
>
  <div class="admin-dashboard">
    <header class="admin-header">
      <div class="container">
        <h1>Edit Restaurant: {restaurant.name}</h1>
        <nav class="admin-nav">
          <a href="/admin/" class="nav-link">‚Üê Back to Dashboard</a>
          <a href="/admin/featured" class="nav-link">Featured Restaurants</a>
          <a href={`/losangeles/${restaurant.slug}/`} class="nav-link" target="_blank">View Restaurant</a>
        </nav>
      </div>
    </header>

    <main class="admin-content">
      <div class="container">
        <form class="restaurant-form">
          <div class="form-section">
            <h2>Basic Information</h2>
            <div class="form-group">
              <label for="name">Restaurant Name</label>
              <input type="text" id="name" name="name" value={restaurant.name} required>
            </div>
            
            <div class="form-group">
              <label for="neighborhood">Neighborhood</label>
              <input type="text" id="neighborhood" name="neighborhood" value={restaurant.neighborhood} required>
            </div>
            
            <div class="form-group">
              <label for="address">Address</label>
              <textarea id="address" name="address" rows="2">{restaurant.address}</textarea>
            </div>
            
            <div class="form-group">
              <label for="phone">Phone</label>
              <input type="tel" id="phone" name="phone" value={restaurant.phone}>
            </div>
            
            <div class="form-group">
              <label for="website">Website</label>
              <input type="url" id="website" name="website" value={restaurant.website}>
            </div>
          </div>

          <div class="form-section">
            <h2>Ratings & Scores</h2>
            <div class="form-row">
              <div class="form-group">
                <label for="rating">Google Rating</label>
                <input type="number" id="rating" name="rating" value={restaurant.rating} min="1" max="5" step="0.1">
              </div>
              
              <div class="form-group">
                <label for="dateNightScore">Date Night Score</label>
                <input type="number" id="dateNightScore" name="dateNightScore" value={restaurant.dateNightScore} min="0" max="100">
              </div>
              
              <div class="form-group">
                <label for="priceLevel">Price Level</label>
                <select id="priceLevel" name="priceLevel">
                  <option value="1" selected={restaurant.priceLevel === 1}>$ (Budget)</option>
                  <option value="2" selected={restaurant.priceLevel === 2}>$$ (Moderate)</option>
                  <option value="3" selected={restaurant.priceLevel === 3}>$$$ (Expensive)</option>
                  <option value="4" selected={restaurant.priceLevel === 4}>$$$$ (Very Expensive)</option>
                </select>
              </div>
            </div>
          </div>

          <div class="form-section">
            <h2>Cuisine Types</h2>
            <div class="cuisine-checkboxes">
              {['fine_dining', 'contemporary', 'italian_restaurant', 'french_restaurant', 'japanese_restaurant', 'seafood_restaurant', 'californian', 'american', 'mediterranean', 'wine_bar', 'steakhouse', 'sushi', 'romantic', 'rooftop_restaurant'].map(cuisine => (
                <label class="checkbox-label">
                  <input type="checkbox" name="cuisineTypes" value={cuisine} checked={restaurant.cuisineTypes.includes(cuisine)}>
                  <span>{cuisine.replace(/_/g, ' ')}</span>
                </label>
              ))}
            </div>
          </div>

          <div class="form-section">
            <h2>Special Features</h2>
            <div class="feature-checkboxes">
              {['Rooftop Dining', 'Outdoor Seating', 'Private Dining', 'Wine Bar', 'Live Music', 'Romantic Setting', 'Waterfront', 'Historic Building'].map(feature => (
                <label class="checkbox-label">
                  <input type="checkbox" name="specialFeatures" value={feature} checked={restaurant.specialFeatures?.includes(feature)}>
                  <span>{feature}</span>
                </label>
              ))}
            </div>
          </div>

          <div class="form-section">
            <h2>Featured Status</h2>
            <div class="form-group">
              <label class="checkbox-label">
                <input type="checkbox" name="isTopRated" checked={restaurant.isTopRated}>
                <span>Featured Restaurant (appears in top recommendations)</span>
              </label>
            </div>
          </div>

          <div class="form-actions">
            <button type="submit" class="btn btn-primary">Save Changes</button>
            <a href="/admin/" class="btn btn-secondary">Cancel</a>
          </div>
        </form>
      </div>
    </main>
  </div>
</BaseLayout>

<style>
  .admin-dashboard {
    min-height: 100vh;
    background: #f8f9fa;
  }

  .admin-header {
    background: #2C2C2C;
    color: white;
    padding: 1rem 0;
    border-bottom: 3px solid #D4AF37;
  }

  .admin-header h1 {
    margin: 0 0 1rem 0;
    color: #D4AF37;
  }

  .admin-nav {
    display: flex;
    gap: 2rem;
  }

  .nav-link {
    color: white;
    text-decoration: none;
    padding: 0.5rem 1rem;
    border-radius: 5px;
    transition: background-color 0.3s ease;
  }

  .nav-link:hover {
    background: rgba(212, 175, 55, 0.2);
  }

  .admin-content {
    padding: 2rem 0;
  }

  .restaurant-form {
    background: white;
    padding: 2rem;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    max-width: 800px;
    margin: 0 auto;
  }

  .form-section {
    margin-bottom: 2rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid #eee;
  }

  .form-section:last-of-type {
    border-bottom: none;
  }

  .form-section h2 {
    margin: 0 0 1rem 0;
    color: #2C2C2C;
    font-size: 1.2rem;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: #2C2C2C;
  }

  input, textarea, select {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
  }

  input:focus, textarea:focus, select:focus {
    outline: none;
    border-color: #D4AF37;
  }

  .cuisine-checkboxes, .feature-checkboxes {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 0.5rem;
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 5px;
    transition: background-color 0.3s ease;
  }

  .checkbox-label:hover {
    background: #f8f9fa;
  }

  .checkbox-label input[type="checkbox"] {
    width: auto;
    margin: 0;
  }

  .form-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
    margin-top: 2rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }

  .btn {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    border-radius: 5px;
    text-decoration: none;
    font-size: 1rem;
    font-weight: 500;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
  }

  .btn-primary {
    background: #D4AF37;
    color: white;
  }

  .btn-primary:hover {
    background: #B8941F;
  }

  .btn-secondary {
    background: #6c757d;
    color: white;
  }

  .btn-secondary:hover {
    background: #5a6268;
  }

  @media (max-width: 768px) {
    .form-row {
      grid-template-columns: 1fr;
    }
    
    .cuisine-checkboxes, .feature-checkboxes {
      grid-template-columns: 1fr;
    }
    
    .form-actions {
      flex-direction: column;
    }
  }
</style>

<script>
  // Form submission handling
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('.restaurant-form');
    
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      
      // Collect form data
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      
      // Handle checkbox arrays
      data.cuisineTypes = Array.from(form.querySelectorAll('input[name="cuisineTypes"]:checked')).map(cb => cb.value);
      data.specialFeatures = Array.from(form.querySelectorAll('input[name="specialFeatures"]:checked')).map(cb => cb.value);
      
      // Convert string values to appropriate types
      data.rating = parseFloat(data.rating);
      data.dateNightScore = parseInt(data.dateNightScore);
      data.priceLevel = parseInt(data.priceLevel);
      data.isTopRated = form.querySelector('input[name="isTopRated"]').checked;
      
      console.log('Form data:', data);
      
      // Show success message
      alert('Restaurant updated successfully! (Note: This is a demo - changes are not persisted)');
      
      // In a real application, you would send this data to your API
      // fetch('/api/restaurants/' + restaurant.slug, {
      //   method: 'PUT',
      //   headers: { 'Content-Type': 'application/json' },
      //   body: JSON.stringify(data)
      // });
    });
  });
</script>
